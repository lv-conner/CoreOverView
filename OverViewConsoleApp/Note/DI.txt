一、DI(依赖注入)
以来注入是控制反转（IOC）的一种实现方式；
DIP(依赖倒置原则)高层模块不应依赖与低层模块，两者都应该应该依赖与抽象。由于两者依赖的抽象由高层模块定义，因此低层模块依赖于高层模块。
IOC（控制反转）则是对DIP的引申。在DIP中，无论如何，最终都需要搞成模块去创建具体的低层模块，这里底层模块的创建控制权在高层模块中。而IOC则通过引入一个第三方容器来存储抽象与实现之间的映射。并通过抽象来提供具体的实现。
这样就解决了对象最终的创建过程。将对象的创建过程统一进行管理，如果需要修改具体的实现，只需要修改注册的服务即可。
在AspNetCore中原生提供了一个DI容器，其最后以一个IServiceProvider接口表示：
该接口只有一个方法:
object GetService(Type service);
我们只需要向其中提供一个关于服务类型的描述，就可以得到一个可以直接使用的对象。